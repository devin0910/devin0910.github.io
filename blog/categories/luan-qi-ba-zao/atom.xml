<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 乱七八糟 | My Octopress Blog]]></title>
  <link href="http://devin0910.github.io/blog/categories/luan-qi-ba-zao/atom.xml" rel="self"/>
  <link href="http://devin0910.github.io/"/>
  <updated>2014-04-13T02:25:56+08:00</updated>
  <id>http://devin0910.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vagrant：快速搭建Linux开发环境]]></title>
    <link href="http://devin0910.github.io/blog/2013/09/13/a-new-way-to-set-up-develop-enviroment-using-vagrant/"/>
    <updated>2013-09-13T13:46:00+08:00</updated>
    <id>http://devin0910.github.io/blog/2013/09/13/a-new-way-to-set-up-develop-enviroment-using-vagrant</id>
    <content type="html"><![CDATA[<h2>关于Vagrant</h2>

<p>Vagrant是一个基于Ruby的工具，用于创建和部署虚拟化开发环境。它使用Oracle的开源Virtualbox虚拟化系统，使用Chef、Puppet创建自动化虚拟环境。使用虚拟化环境来模拟跟生产环境一样的各种软件配置会让我们尽早地发现程序中的问题，避免在上线之后出现各种莫名其妙的问题（如Linux系统中文件区分大小写而Windows则不会，以至于找不到相应的文件等）。</p>

<h2>运行简介</h2>

<p>首先使用<code>vagrant init</code>命令来生成一个Vagrantfile，当然你也可以在执行这个命令的时候附加box的名称、链接地址。Box可以理解为一个虚拟机的模板，vagrant会导入这个模板，然后在这个模板的基础上进行各种配置，如设置IP、挂载共享目录、运行puppet脚本等。如<code>vagrant init precise32 http://files.vagrantup.com/precise32.box</code>，如果本地不存在这样的一个box，会从远程下载这个box，并添加到box list中。你可以通过<code>vagrant box list</code>查看本地的box list。当然你也可以通过<code>vagrant box remove precise32 virtualbox</code>来删除这个box。也有另外一个添加box的命令<code>vagrant box add name url</code>来添加box，如果需要你可以在<a href="http://www.vagrantbox.es/">Vagrant Boxes</a>找到更多不同类型的操作系统的boxes，添加到本地，然后以这box为模板创建另外的操作系统环境。</p>

<p>接下来，你可以运行<code>vagrant up</code>来启动这个虚拟机。虚拟机起来之后你可以使用<code>vagrant ssh</code>连接到这个服务器上，当然你也可以xshell等工具来连接，对虚拟机进行管理。当你配置文件改变时，你可以使用<code>vagrant reload</code>来重新加载配置。通过<code>vagrant halt</code>，可以停止这个虚拟机，如果不能正常关闭，可以通过&mdash;force选项来直接关闭虚拟机的电源。当你不再需要这个虚拟机时，可以通过<code>vagrant destroy</code>来销毁这个虚拟机。</p>

<h2>使用<a href="https://puphpet.com/">PuPHPet</a>来配置PHP开发环境</h2>

<p><a href="https://puphpet.com/">PuPHPet</a>是一个用来配置PHP开发环境的GUI工具。你可以在上面选择操作系统的类型，虚拟机名称，IP地址，需要安装的软件；选择HTTP Server（Apache or Nginx），配置apache的模块，Virtual Host，端口、目录、环境变量等等；选择PHP的版本，需要安装的扩展、Composer、Xdebug、XHProf的配置，时区，ini中基本配置如是否显示错误等；选择数据库，Mysl or PostgresSQL，配置相关参数等等。当你选择好自己的配置后，点击“Create My Manifest！”下载对应的Vagrantfile及一些Puppet脚本，解压该文件，然后运行<code>vagrant up</code>等待虚拟机的自动搭建完成即可使用了。以后只要在团队中分享配置文件，就可以使得团队中使用一致的开发环境，简化并大大节省了开发人员的自己搭建开发环境时间。</p>

<h2>关于.vagrant.d目录和VirtualBox</h2>

<p>Vagrant默认情况下会把下载的box放在用户家目录下的.vagrant.d目录中。如果添加的box过多了，会导致C盘空间变少，你只需要在环境变量中添加<code>VAGRANT_HOME</code>，指定到另外的盘符，然后把.vagrant.d下的文件拷贝到该目录下即可。还有就是Virtual Box的虚拟电脑位置，在“管理->全局设定->常规”中指定“默认虚拟电脑位置”到空间比较大的盘符中。如果已经在C盘中，整个过程会比较麻烦，需要打开VirtualBox然后选中虚拟机，复制到另外的盘符，然后得修改该虚拟机配置下的.vagrant\machines\default\virtualbox中的id文件，该文件记录了虚拟机的uuid。可以查看刚复制过去的虚拟机目录中xxx.vbox文件，可以找到类似于“Machine uuid=&ldquo;{ccc58f40-4e4b-41b4-8098-02712170c51a}"”这样的一段文字，拷贝该uuid到id文件中即可。</p>

<p>这里只是简单的介绍了一下Vagrant的基本用法，想要了解更多可以查看<a href="http://docs.vagrantup.com/v2/">官网文档</a>。你也可以了解下<a href="http://puppetlabs.com/">Puppet</a>，<a href="http://www.opscode.com/chef/">Chef</a>自动化部署脚本工具。</p>

<p>参考：</p>

<ol>
<li><a href="http://www.vagrantup.com/">Vagrant官网</a></li>
<li><a href="http://linbo.github.io/2013/03/09/vagrantboxes/">Vagrant改变boxes存放路径</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[怎样在新的环境中配置原有的Octopress博客]]></title>
    <link href="http://devin0910.github.io/blog/2013/08/02/setting-up-existing-octopress-blog-on-a-new-computer/"/>
    <updated>2013-08-02T15:06:00+08:00</updated>
    <id>http://devin0910.github.io/blog/2013/08/02/setting-up-existing-octopress-blog-on-a-new-computer</id>
    <content type="html"><![CDATA[<p>原本是在公司的电脑中搭建这个博客的，现在准备在自己的笔记本中也可以使用，查看了一些资料，记录一下一些命令。</p>

<ol>
<li><p>首先得把博客clone下来：git clone git@github.com:xxxxx/blog.git</p></li>
<li><p>切换到master分支上git checkout master来获取源文件</p></li>
<li><p><a href="http://octopress.org/docs/setup/">安装依赖</a>：<code>gem install bundler</code>, <code>bundle install</code>（省略ruby安装等步骤）</p></li>
<li><p>通过运行<code>rake setup_github_pages</code>设置博客发布的git仓库（也就是上面克隆的地址），生成_deploy文件夹</p></li>
<li><p>通过<code>rake generate</code>来生成public等目录</p></li>
</ol>


<p>可能_deploy目录中有冲突，需要特别注意处理！现在就可以在新环境中新博客了！</p>

<p>参考：</p>

<p><a href="http://scottcheng.com/blog/2012/11/setting-up-existing-octopress-blog-on-a-new-computer/">Setting Up Existing Octopress Blog on a New Computer</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[怎样来配置你的Sublime Text 3]]></title>
    <link href="http://devin0910.github.io/blog/2013/07/15/how-to-configure-sublime-text-3/"/>
    <updated>2013-07-15T11:18:00+08:00</updated>
    <id>http://devin0910.github.io/blog/2013/07/15/how-to-configure-sublime-text-3</id>
    <content type="html"><![CDATA[<p>最近一直在使用Sublime Text来进行开发，由于需要升级，这里就记录一下升级过程需要注意的事项及自己常用安装包吧。</p>

<h2>Package Control</h2>

<p>顾名思义，作为一个Sublime Text软件包管理工具，可以帮你便捷地发现、安装、更新和移除第三方包，支持自动地从GitHub，BitBucket等代码管理平台中获取第三方包的最新版本。</p>

<p>在Sublime Text 3版中，根据作者介绍可以<a href="http://wbond.net/sublime_packages/package_control/installation#ST3">通过git方式</a>来安装：首先得定位Packages目录（可以通过菜单栏的“Preferences/Browser Packages”打开该目录），接下来你可以在git bash或者命令行中输入一下命令：</p>

<pre><code>cd Packages/  # 切换到上面所提到的目录
git clone https://github.com/wbond/sublime_package_control.git "Package Control"
cd "Package Control"
git checkout python3
</code></pre>

<p>重启下Sublime，如果你在Preferences菜单下发现多出了Package Settings, Package Control，那么你已安装成功。如果你当前电脑中没有安装git，可以通过<a href="http://qianduanblog.com/1900.html">这篇文章</a>所描述的步骤进行安装。接下来你可以简单地从Preferences/Package Control中启动，也可以直接使用Ctrl + Shift + P输入pgc来找出Package Control相关的命令。</p>

<h2>常用软件包</h2>

<h3>CTags</h3>

<p>首先得在系统中安装Ctags，可以直接在官网中下载并解压，把ctags.exe放到你的Sublime Text所在目录，或者放在系统的搜索路径中。</p>

<p>在Package Control中Install Package中搜索CTags并安装。安装完成之后，可以使用<code>Ctrl + t + r</code>来创建.tags工程符号索引文件，在左侧打开文件列表中的目录上点击右键，可以发现“CTags：Rebuild Tags”来重建Tags。</p>

<h3>SublimeLinter</h3>

<h3>Markdown Preview</h3>

<h3>GBK Encoding Support</h3>

<h3>VAlign</h3>

<p><code>Ctrl + \</code></p>

<h3>PHP Namespace Command</h3>

<h3>Goto Documentation</h3>

<h3>GitGutter</h3>

<h3>Gist</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cURL的一些妙用]]></title>
    <link href="http://devin0910.github.io/blog/2013/07/12/a-brief-introduction-to-curl/"/>
    <updated>2013-07-12T10:26:00+08:00</updated>
    <id>http://devin0910.github.io/blog/2013/07/12/a-brief-introduction-to-curl</id>
    <content type="html"><![CDATA[<h2>关于cURL</h2>

<p>根据<a href="http://zh.wikipedia.org/wiki/CURL">Wiki</a>上的介绍：</p>

<blockquote><p>cURL是一个利用URL语法在命令行下工作的文件传输工具，1997年首次发行。它支持文件上传和下载，所以是综合传输工具，但按传统，习惯称cURL为下载工具。cURL还包含了用于程序开发的libcurl。cURL支援的通讯协定有FTP、FTPS、HTTP、HTTPS、TFTP、SFTP、Gopher、SCP、Telnet、DICT、FILE、LDAP、LDAPS、IMAP、POP3、SMTP和RTSP。</p></blockquote>

<p>在Ubuntu下你可以通过下面这个命令<code>apt-get install curl</code>来安装cURL，如果你使用的是Windows，那么你可以通过安装cygwin或者直接<a href="http://curl.haxx.se/download.html#Win64">点击这儿</a>下载相应的版本。安装成功之后，你可以通过<code>curl --help</code>查看这个命令的相关参数介绍。</p>

<h2>入门篇</h2>

<ol>
<li><p>查看网页源码：</p>

<p> curl <a href="http://www.netscape.com/">http://www.netscape.com/</a></p></li>
</ol>


<p>&mdash;&mdash;&mdash;&mdash;输出内容：</p>

<pre><code>&lt;!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN"&gt;
&lt;html&gt;&lt;head&gt;
&lt;title&gt;301 Moved Permanently&lt;/title&gt;
&lt;/head&gt;&lt;body&gt;
&lt;h1&gt;Moved Permanently&lt;/h1&gt;
&lt;p&gt;The document has moved &lt;a href="http://netscape.aol.com"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;
</code></pre>

<p>你也可以通过</p>

<pre><code>curl ftp://ftp.funet.fi/README
</code></pre>

<p>查看远程ftp服务器上的文件内容。</p>

<ol>
<li><p>保存文件内容：
上面我们讲到了如何查看远程服务器上的内容，那怎么保存在本地呢？
通过<code>curl --help</code>可以看到-o选项可以让实现这个功能：</p>

<p>  -o, &mdash;output FILE   Write output to <file> instead of stdout</p></li>
</ol>


<p>那么，如果要保存远程文件，可以使用下面的命令：<code>curl -o test.html http://www.netscape.com/</code>，这样你就可以在当前命令行的目录下可以看到多出了一个test.html文件（你可以把文件保存成任意名称的，只需修改-o后面的参数即可）。
如果想要保持本地保存的文件名跟远程文件名一致，只需要指定参数<code>-O</code>:</p>

<pre><code>-O, --remote-name   Write output to a file named as the remote file
</code></pre>

<p>比如：<code>curl -O ftp://ftp.funet.fi/README</code>。</p>

<ol>
<li><p>指定用户名、密码：
当使用ftp传输文件需要指定用户名、密码时，我们可以在url中包含它们，eg：<code>curl ftp://name:passwd@machine.domain:port/full/path/to/file</code>也可以使用-u选项：<code>curl -u name:passwd ftp://machine.domain:port/full/path/to/file</code>。</p></li>
<li><p>自动跳转：
第一个示例中，我们可以看到，这个站点已被重定向了，可以使用<code>-L</code>参数：</p>

<p>  -L, &mdash;location      Follow redirects (H)</p></li>
</ol>


<p>那么现在这个命令应该是<code>curl -L http://www.netscape.com/</code></p>

<h2>表单提交</h2>

<p>有时候当你写完后台程序功能，为了测试表单功能是否正确需要模拟测试，你可以简单的通过写html页面模拟一个表单或者通过js的Ajax来模拟一个请求。其实还有个更简便的方法&mdash;使用cURL。</p>

<ol>
<li><p>测试GET方法：
测试GET方法其实很简单，可以直接在url后面跟参数，比如<code>curl "http://localhost/test/index.php?a=a&amp;b=b"</code>
注意：如果不对链接加双引号<code>curl http://localhost/test/index.php?a=a&amp;b=b</code>，则只会取到第一参数，在这个例子中为<code>a=a</code>。在linux下，&amp;会使进程系统后台运行，必须对&amp;进行下转义：
<code>curl http://localhost/test/index.php?a=a\&amp;b=b</code>。</p></li>
<li><p>测试POST方法：
模拟表单提交很简单，只需要在<code>-d</code>参数后跟需要提交的参数键值对，例如：
<code>curl -d "name=test&amp;age=22" http://localhost/test/index.php</code>。需要注意的是所有通过post提交的数据需要进行编码，比如“test 1”编码后为"test%201",可以通过js的<code>encodeURIComponent</code>函数，或者php的<code>urlencode</code>函数等。</p></li>
</ol>


<p><code>-F</code>指令可接受类似于<code>-F "name=contents"</code>的参数。如果你上传的内容是从文件里读取的，使用&lt;@filename>作为内容。当你指定一个文件时，也可以在文件名后跟文件的内容类型<code>";type=&lt;mime type&gt;"</code>,比如：<code>curl -F "coolfiles=@b.png;type=image/png" http://localhost/test/index.php</code>。</p>

<p>cURL默认的HTTP动词是GET，使用-X参数可以支持其他动词，如delete <code>curl -X DELETE http://localhost/test/index.php</code>，结果类似于<code>[REQUEST_METHOD] =&gt; DELETE</code>。</p>

<h3>设置cookie，更改头信息等</h3>

<ol>
<li><p>设置cookie：
<code>curl -b "test=test-cookie" http://localhost/test/index.php</code>
<code>curl --cookie "test=test-cookie" http://localhost/test/index.php</code></p></li>
<li><p>增加头信息：
<code>curl -H "X-you-and-me: yes" http://localhost/test/index.php</code>
<code>curl --header "X-you-and-me: yes" http://localhost/test/index.php</code></p></li>
<li><p>更改User Agent：
User Agent用来表示客户端的设备信息，服务器有时会根据这个字段，针对不同设备，返回不同格式的网页，比如手机版和桌面版。默认使用cURL的情况下，返回的头部信息类似于：<code>[User-Agent] =&gt; curl/7.26.0</code>。我们可以使用下面的命令<code>curl -A 'Mozilla/5.0' http://localhost/test/index.php</code>来更改User Agent。上述输出为：<code>[User-Agent] =&gt; 'Mozilla/5.0'</code>。</p></li>
</ol>


<h2>Conclusion</h2>

<p>就像cURL官网介绍的：</p>

<blockquote><p>curl groks(凭直觉深刻了解；欣赏；神交) URLs</p></blockquote>

<p>cURL可以称得上是网络传输相关的瑞士军刀，你可以在<a href="http://curl.haxx.se/docs/manual.html">cURL官方手册</a>找到更多的高级使用方法。</p>

<p>参考：</p>

<ol>
<li><a href="http://curl.haxx.se/docs/manual.html">cURL官方手册</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2011/09/curl.html">curl网站开发指南</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
