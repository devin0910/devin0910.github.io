<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[coding-micros]]></title>
  <link href="http://devin0910.github.io/atom.xml" rel="self"/>
  <link href="http://devin0910.github.io/"/>
  <updated>2014-04-14T20:45:53+08:00</updated>
  <id>http://devin0910.github.io/</id>
  <author>
    <name><![CDATA[devin_yee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vagrant：快速搭建Linux开发环境]]></title>
    <link href="http://devin0910.github.io/blog/2013/09/13/a-new-way-to-set-up-develop-enviroment-using-vagrant/"/>
    <updated>2013-09-13T13:46:00+08:00</updated>
    <id>http://devin0910.github.io/blog/2013/09/13/a-new-way-to-set-up-develop-enviroment-using-vagrant</id>
    <content type="html"><![CDATA[<h2>关于Vagrant</h2>

<p>Vagrant是一个基于Ruby的工具，用于创建和部署虚拟化开发环境。它使用Oracle的开源Virtualbox虚拟化系统，使用Chef、Puppet创建自动化虚拟环境。使用虚拟化环境来模拟跟生产环境一样的各种软件配置会让我们尽早地发现程序中的问题，避免在上线之后出现各种莫名其妙的问题（如Linux系统中文件区分大小写而Windows则不会，以至于找不到相应的文件等）。</p>

<h2>运行简介</h2>

<p>首先使用<code>vagrant init</code>命令来生成一个Vagrantfile，当然你也可以在执行这个命令的时候附加box的名称、链接地址。Box可以理解为一个虚拟机的模板，vagrant会导入这个模板，然后在这个模板的基础上进行各种配置，如设置IP、挂载共享目录、运行puppet脚本等。如<code>vagrant init precise32 http://files.vagrantup.com/precise32.box</code>，如果本地不存在这样的一个box，会从远程下载这个box，并添加到box list中。你可以通过<code>vagrant box list</code>查看本地的box list。当然你也可以通过<code>vagrant box remove precise32 virtualbox</code>来删除这个box。也有另外一个添加box的命令<code>vagrant box add name url</code>来添加box，如果需要你可以在<a href="http://www.vagrantbox.es/">Vagrant Boxes</a>找到更多不同类型的操作系统的boxes，添加到本地，然后以这box为模板创建另外的操作系统环境。</p>

<p>接下来，你可以运行<code>vagrant up</code>来启动这个虚拟机。虚拟机起来之后你可以使用<code>vagrant ssh</code>连接到这个服务器上，当然你也可以xshell等工具来连接，对虚拟机进行管理。当你配置文件改变时，你可以使用<code>vagrant reload</code>来重新加载配置。通过<code>vagrant halt</code>，可以停止这个虚拟机，如果不能正常关闭，可以通过&mdash;force选项来直接关闭虚拟机的电源。当你不再需要这个虚拟机时，可以通过<code>vagrant destroy</code>来销毁这个虚拟机。</p>

<h2>使用<a href="https://puphpet.com/">PuPHPet</a>来配置PHP开发环境</h2>

<p><a href="https://puphpet.com/">PuPHPet</a>是一个用来配置PHP开发环境的GUI工具。你可以在上面选择操作系统的类型，虚拟机名称，IP地址，需要安装的软件；选择HTTP Server（Apache or Nginx），配置apache的模块，Virtual Host，端口、目录、环境变量等等；选择PHP的版本，需要安装的扩展、Composer、Xdebug、XHProf的配置，时区，ini中基本配置如是否显示错误等；选择数据库，Mysl or PostgresSQL，配置相关参数等等。当你选择好自己的配置后，点击“Create My Manifest！”下载对应的Vagrantfile及一些Puppet脚本，解压该文件，然后运行<code>vagrant up</code>等待虚拟机的自动搭建完成即可使用了。以后只要在团队中分享配置文件，就可以使得团队中使用一致的开发环境，简化并大大节省了开发人员的自己搭建开发环境时间。</p>

<h2>关于.vagrant.d目录和VirtualBox</h2>

<p>Vagrant默认情况下会把下载的box放在用户家目录下的.vagrant.d目录中。如果添加的box过多了，会导致C盘空间变少，你只需要在环境变量中添加<code>VAGRANT_HOME</code>，指定到另外的盘符，然后把.vagrant.d下的文件拷贝到该目录下即可。还有就是Virtual Box的虚拟电脑位置，在“管理->全局设定->常规”中指定“默认虚拟电脑位置”到空间比较大的盘符中。如果已经在C盘中，整个过程会比较麻烦，需要打开VirtualBox然后选中虚拟机，复制到另外的盘符，然后得修改该虚拟机配置下的.vagrant\machines\default\virtualbox中的id文件，该文件记录了虚拟机的uuid。可以查看刚复制过去的虚拟机目录中xxx.vbox文件，可以找到类似于“Machine uuid=&ldquo;{ccc58f40-4e4b-41b4-8098-02712170c51a}&#8221;”这样的一段文字，拷贝该uuid到id文件中即可。</p>

<p>这里只是简单的介绍了一下Vagrant的基本用法，想要了解更多可以查看<a href="http://docs.vagrantup.com/v2/">官网文档</a>。你也可以了解下<a href="http://puppetlabs.com/">Puppet</a>，<a href="http://www.opscode.com/chef/">Chef</a>自动化部署脚本工具。</p>

<p>参考：</p>

<ol>
<li><a href="http://www.vagrantup.com/">Vagrant官网</a></li>
<li><a href="http://linbo.github.io/2013/03/09/vagrantboxes/">Vagrant改变boxes存放路径</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用位运算实现权限管理]]></title>
    <link href="http://devin0910.github.io/blog/2013/08/12/creating-permissions-using-bitwise-operators/"/>
    <updated>2013-08-12T17:58:00+08:00</updated>
    <id>http://devin0910.github.io/blog/2013/08/12/creating-permissions-using-bitwise-operators</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[怎样在新的环境中配置原有的Octopress博客]]></title>
    <link href="http://devin0910.github.io/blog/2013/08/02/setting-up-existing-octopress-blog-on-a-new-computer/"/>
    <updated>2013-08-02T15:06:00+08:00</updated>
    <id>http://devin0910.github.io/blog/2013/08/02/setting-up-existing-octopress-blog-on-a-new-computer</id>
    <content type="html"><![CDATA[<p>原本是在公司的电脑中搭建这个博客的，现在准备在自己的笔记本中也可以使用，查看了一些资料，记录一下一些命令。</p>

<ol>
<li><p>首先得把博客clone下来：git clone git@github.com:xxxxx/blog.git</p></li>
<li><p>切换到master分支上git checkout master来获取源文件</p></li>
<li><p><a href="http://octopress.org/docs/setup/">安装依赖</a>：<code>gem install bundler</code>, <code>bundle install</code>（省略ruby安装等步骤）</p></li>
<li><p>通过运行<code>rake setup_github_pages</code>设置博客发布的git仓库（也就是上面克隆的地址），生成_deploy文件夹</p></li>
<li><p>通过<code>rake generate</code>来生成public等目录</p></li>
</ol>


<p>可能_deploy目录中有冲突，需要特别注意处理！现在就可以在新环境中新博客了！</p>

<p>参考：</p>

<p><a href="http://scottcheng.com/blog/2012/11/setting-up-existing-octopress-blog-on-a-new-computer/">Setting Up Existing Octopress Blog on a New Computer</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用PHP引用来生成树结构]]></title>
    <link href="http://devin0910.github.io/blog/2013/07/23/building-tree-structures-in-php-using-references/"/>
    <updated>2013-07-23T20:06:00+08:00</updated>
    <id>http://devin0910.github.io/blog/2013/07/23/building-tree-structures-in-php-using-references</id>
    <content type="html"><![CDATA[<p>其实经常会遇到生成树结构的情况，比如多级菜单，用户的评论等。当然可以较复杂的SQL来实现树结构，但是如果在PHP中实这一功能可以很大地缓解数据库压力。</p>

<pre><code>&lt;?php

function buildTree(array $dataset)
{
    $tree = array();

    $references = array();
    foreach ($dataset as $id =&gt; &amp;$node) {
        $references[$node['id']] = &amp;$node;

        $node['children'] = array();

        if (is_null($node['parentId'])) {
            $tree[$node['id']] = &amp;$node;
        } else {
            $references[$node['parentId']]['children'][$node['id']] = &amp;$node;
        }
    }

    return $tree;
}

$data = array(
        array('id' =&gt; 1, 'parentId' =&gt; null, 'data' =&gt; 1),
        array('id' =&gt; 2, 'parentId' =&gt; 1, 'data' =&gt; 2),
        array('id' =&gt; 3, 'parentId' =&gt; 1, 'data' =&gt; 3),
        array('id' =&gt; 4, 'parentId' =&gt; 1, 'data' =&gt; 4),
        array('id' =&gt; 5, 'parentId' =&gt; null, 'data' =&gt; 5),
        array('id' =&gt; 6, 'parentId' =&gt; 5, 'data' =&gt; 6),
        array('id' =&gt; 7, 'parentId' =&gt; 4, 'data' =&gt; 7),
);

print_r(buildTree($data));
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[生成器：PHP5.5中的新特性]]></title>
    <link href="http://devin0910.github.io/blog/2013/07/19/generator-new-feature-in-php/"/>
    <updated>2013-07-19T20:00:00+08:00</updated>
    <id>http://devin0910.github.io/blog/2013/07/19/generator-new-feature-in-php</id>
    <content type="html"><![CDATA[<p>为什么要引入Generator呢？根据php文档中介绍：</p>

<blockquote><p>Generators provide an easy way to implement simple iterators without the overhead or complexity of
implementing a class that implements the Iterator interface.</p></blockquote>

<p>也就是说我们可以使用Generator来简单地实现迭代，而不需要实现Iterator接口。Generator能让我们在使用<code>foreach</code>遍历数据集时不需要在内存中先分配该数据集的内存。比如说我们在使用<code>range(0, 1000000)</code>会消耗100多MB，但是使用Generator的话，只需要不到1K的空间。那我们来看看PHP官网上实现Generator版的<code>xrange</code>吧！</p>

<pre><code>&lt;?php

function xrange($start, $limit, $step = 1)
{
    if ($start &lt; $limit) {
        if ($step &lt;= 0) {
            throw new LogicException('Step must be +ve');
        }

        for ($i = $start; $i &lt;= $limit $i += $step) {
            yield $i;
        }
    } else {
        if ($step &gt;= 0) {
            throw new LogicException('Step must be -ve');
        }

        for ($i = $start; $i &gt;= $limit; $i += $step) {
            yield $i;
        }
    }
}

foreach (xrange(0, 1000000) as $number) {
    echo $number;
}
</code></pre>

<p>乍看上面的<code>xrange</code>返回值为null，其实它返回的是一个<a href="http://www.php.net/manual/zh/class.generator.php">Generator类</a>的一个实例，该类实现了Iterator接口。也就是说，当我们在foreach中调用<code>xrange</code>的时候，PHP会执行函数内的代码，当第一次遇到yield的时候，会返回这个Generator实例，并且记住该状态。当调用这个Generator实例的next()方法时，PHP又会重新从上面记住的状态执行代码，循环执行上面的过程，直到遍历结束。</p>

<p>值得注意的是上面所提到的Generator类除了实现Iterator接口外还有另外一个很有趣的方法：<code>send($value)</code>。文档上说，该方法传递给生成器的值<code>$value</code>可以作为<code>yield</code>表达式的结果，然后恢复执行这个生成器。</p>

<pre><code>&lt;?php

function printer()
{
    while (true) {
        $string = yield;
        echo $string;
    }
}

$printer = printer();
$printer-&gt;send('Hello world!');

--output:
'Hello world!'
</code></pre>

<p>参考：</p>

<ol>
<li><a href="http://www.php.net/manual/zh/language.generators.overview.php">PHP 文档</a></li>
<li><a href="http://blog.ircmaxell.com/2012/07/what-generators-can-do-for-you.html">What Generators Can Do For You</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[控制反转(IoC)与依赖注入(DI)]]></title>
    <link href="http://devin0910.github.io/blog/2013/07/16/inversion-of-control-and-dependency-injecton/"/>
    <updated>2013-07-16T12:23:00+08:00</updated>
    <id>http://devin0910.github.io/blog/2013/07/16/inversion-of-control-and-dependency-injecton</id>
    <content type="html"><![CDATA[<h2>什么是控制反转</h2>

<p>控制反转（Inversion of control）是面向对象编程中的一种设计原则，可以用来降低计算机代码中的耦合度。控制反转作为一个设计准则具有一下几个意图：</p>

<ul>
<li>通过接口解耦某项任务的特定实现</li>
<li>各个模块只关注自己要实现的功能</li>
<li>各个模块不知道另外的系统做什么，只依赖于它们间的契约</li>
<li>替换某个模块并不影响其他模块</li>
</ul>


<p>应用控制反转，对象在被创建的时候，由一个调控系统内的所有对象的外界实体将其依赖的对象的引用传递给它，也可以说，依赖被注入到对象中。所以说，控制反转是<em>关于一个对象如何获取它所依赖的对象的引用</em>这个职责的反转。</p>

<h3>关于依赖</h3>

<p>Class X依赖于Class Y只在如下的状况中成立：</p>

<ul>
<li>X拥有Y的控制并在X中使用</li>
<li>X是Y的派生类</li>
<li>X依赖于Z，而Z又依赖于Y（传递性）</li>
</ul>


<p>X依赖于Y并不表示Y也依赖于X。但如果X和Y同时依赖于对方，这种依赖性被称为循环依赖。这时，X无法和Y分开单独使用，反之亦然。如果在一个面向对象程序中拥有太多的循环依赖，这可能表示这个程序是欠佳的设计。</p>

<h3>如何实现控制反转</h3>

<ul>
<li>使用工厂模式</li>
<li>使用服务定位模式</li>
<li>使用依赖注入

<ul>
<li>基于构造函数</li>
<li>基于参数</li>
<li>基于setter</li>
<li>基于接口</li>
</ul>
</li>
<li>通过上下文查找依赖：容器提供回调接口和上下文环境给组件（EJB，Apache Avalon等），经常融合了服务定位模式。</li>
</ul>


<h2>什么是依赖注入</h2>

<p>比如某个网站需要实现通知功能的功能，实例代码如下:</p>

<pre><code>&lt;?php

class NotifyService
{
    public function notify();
}

class User
{
    // 发送通知信息
    public function ntofiy()
    {
        // ... 省略处理逻辑
        $notifyService = new NotifyService();
        $notifyService-&gt;notify();
        // ...
    }
}
</code></pre>

<p>上面的代码中，耦合了通知的特定实现，必须要知道是何种通知形式，比如说邮件通知或者短信等等。如何从上面的代码从解耦出这一依赖呢？很明显，大家都会想到提取接口。</p>

<pre><code>&lt;?php

interface INotifyService
{
    abstract public function notify();
}

class EmailNotifyService implements INotifyService
{
    public function notify()
    {
        // 通过邮件发送
    }
}

class SMSNotifyService implements INotifyService
{
    public function notify()
    {
        // 通过发短信
    }
}
</code></pre>

<p>通过上面这段代码，可以扩展出不同的通知类型，比如新增一个站内信的通知类型，只需要简单的继承INotifyService这个接口，实现notify方法就可以了。</p>

<p>那么如何让用户反转对通知形式的依赖呢？</p>

<p>通过构造器：</p>

<pre><code>&lt;?php

class User
{
    private $_notifyService;

    public function __construct(INotifyService $notifyService)
    {
        $this-&gt;_notifyService = $notifyService;
    }
}
</code></pre>

<p>通过setter：</p>

<pre><code>&lt;?php

class User
{
    private $_notifyService;

    public function setNotifyService(INotifyService $notifyService)
    {
        $this-&gt;_notifyService = $notifyService;
    }
}
</code></pre>

<p>通过上面的代码的改动，我们可以在User的notify方法中简单的使用<code>$this-&gt;_notifyService-&gt;notify()</code>。</p>

<p>将选择抽象实现的职责一道服务消费者类的外部，拓展成Service Locator模式：<br/>
这里简单的使用了<a href="https://github.com/fabpot/Pimple">Pimple库</a>作为一个Service Container。</p>

<pre><code>&lt;?php

$serviceContainer = new Pimple();

$serviceContainer['email-notify'] = function ($c) {
    $emailNotifyService = new EmailNotifyService();
    // ......
    return $emailNotifyService;
};

$serviceContainer['sms-notfiy'] = function ($c) {
    $smsNofiyService = new SMSNotifyService();
    // ......
    return $smsNofiyService;
}


class User
{
    private $_serviceContainer;

    public function __construct($serviceContainer)
    {
        $this-&gt;_serviceContainer = $serviceContainer;
    }

    public function notify()
    {
        $this-&gt;_serviceContainer['email-notify']-&gt;notify();
    }
}

$user = new User($serviceContainer);
$user-&gt;notify();
</code></pre>

<p>举例不恰当，User类破坏了<a href="http://zh.wikipedia.org/wiki/%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99">OCP原则（开闭原则）</a>，即对扩展开放，对修改封闭。</p>

<p>依赖注入是这样一个过程：客户类只依赖于服务类的一个接口，而不依赖于具体服务类，所以客户类只定义一个注入点。在程序运行过程中，客户类不直接实例化具体服务类示例，而是客户类的运行上下文环境或专门组件负责实例化服务类，然后将其注入到客户类中，保证客户类的正常运行。</p>

<p>想了解更多，继续看下面的资料：</p>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Inversion_of_control">Wiki IoC</a></li>
<li><a href="http://zh.wikipedia.org/wiki/%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC">Wiki IoC中文</a></li>
<li><a href="http://www.objectmentor.com/resources/articles/dip.pdf">The Dependency Inversion Principle</a></li>
<li><a href="http://symfony.com/doc/current/components/dependency_injection/introduction.html#basic-usage">Symfony Dependency Injection Component</a></li>
<li><a href="https://github.com/fabpot/Pimple">Pimple is a small Dependency Injection Container for PHP 5.3</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于PHP5.5中的新函数array_column]]></title>
    <link href="http://devin0910.github.io/blog/2013/07/15/new-function-array-column-in-php-5-dot-5/"/>
    <updated>2013-07-15T17:00:00+08:00</updated>
    <id>http://devin0910.github.io/blog/2013/07/15/new-function-array-column-in-php-5-dot-5</id>
    <content type="html"><![CDATA[<p>在PHP5.5中有一个新的函数：<a href="http://us2.php.net/manual/zh/function.array-column.php">array_column</a>，该函数可以从数组中返回某一列，类似于PDOStatement::fetchColumn，可以查看关于该函数的<a href="https://wiki.php.net/rfc/array_column">rfc</a>。</p>

<p>该函数的方法签名为<code>array array_column ( array $input , mixed $column_key [, mixed $index_key ] )</code>，可以通过$column_key来指定返回$input的哪一列，如果你指定了$index_key，那该列的值作为返回的数据的索引。</p>

<p>下面是从PHP官网的示例：</p>

<pre><code>&lt;?php
// Array representing a possible record set returned from a database
$records = array(
    array(
        'id' =&gt; 2135,
        'first_name' =&gt; 'John',
        'last_name' =&gt; 'Doe',
    ),
    array(
        'id' =&gt; 3245,
        'first_name' =&gt; 'Sally',
        'last_name' =&gt; 'Smith',
    ),
    array(
        'id' =&gt; 5342,
        'first_name' =&gt; 'Jane',
        'last_name' =&gt; 'Jones',
    ),
    array(
        'id' =&gt; 5623,
        'first_name' =&gt; 'Peter',
        'last_name' =&gt; 'Doe',
    )
);

$first_names = array_column($records, 'first_name');
print_r($first_names);
?&gt;

--输出：
Array
(
    [0] =&gt; John
    [1] =&gt; Sally
    [2] =&gt; Jane
    [3] =&gt; Peter
)
</code></pre>

<p>指定返回数据的索引列：</p>

<pre><code>&lt;?php
// Using the $records array from Example #1
$last_names = array_column($records, 'last_name', 'id');
print_r($last_names);
?&gt;

--输出：
Array
(
    [2135] =&gt; Doe
    [3245] =&gt; Smith
    [5342] =&gt; Jones
    [5623] =&gt; Doe
)
</code></pre>

<p>如何在低版本的PHP中实现该功能呢？你可以使用<a href="https://github.com/ramsey/array_column/blob/master/src/array_column.php">这段代码</a>，也可以通过composer来安装：<code>"rhumsaa/array_column": "~1.1"</code>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[怎样来配置你的Sublime Text 3]]></title>
    <link href="http://devin0910.github.io/blog/2013/07/15/how-to-configure-sublime-text-3/"/>
    <updated>2013-07-15T11:18:00+08:00</updated>
    <id>http://devin0910.github.io/blog/2013/07/15/how-to-configure-sublime-text-3</id>
    <content type="html"><![CDATA[<p>最近一直在使用Sublime Text来进行开发，由于需要升级，这里就记录一下升级过程需要注意的事项及自己常用安装包吧。</p>

<h2>Package Control</h2>

<p>顾名思义，作为一个Sublime Text软件包管理工具，可以帮你便捷地发现、安装、更新和移除第三方包，支持自动地从GitHub，BitBucket等代码管理平台中获取第三方包的最新版本。</p>

<p>在Sublime Text 3版中，根据作者介绍可以<a href="http://wbond.net/sublime_packages/package_control/installation#ST3">通过git方式</a>来安装：首先得定位Packages目录（可以通过菜单栏的“Preferences/Browser Packages”打开该目录），接下来你可以在git bash或者命令行中输入一下命令：</p>

<pre><code>cd Packages/  # 切换到上面所提到的目录
git clone https://github.com/wbond/sublime_package_control.git "Package Control"
cd "Package Control"
git checkout python3
</code></pre>

<p>重启下Sublime，如果你在Preferences菜单下发现多出了Package Settings, Package Control，那么你已安装成功。如果你当前电脑中没有安装git，可以通过<a href="http://qianduanblog.com/1900.html">这篇文章</a>所描述的步骤进行安装。接下来你可以简单地从Preferences/Package Control中启动，也可以直接使用Ctrl + Shift + P输入pgc来找出Package Control相关的命令。</p>

<h2>常用软件包</h2>

<h3>CTags</h3>

<p>首先得在系统中安装Ctags，可以直接在官网中下载并解压，把ctags.exe放到你的Sublime Text所在目录，或者放在系统的搜索路径中。</p>

<p>在Package Control中Install Package中搜索CTags并安装。安装完成之后，可以使用<code>Ctrl + t + r</code>来创建.tags工程符号索引文件，在左侧打开文件列表中的目录上点击右键，可以发现“CTags：Rebuild Tags”来重建Tags。</p>

<h3>SublimeLinter</h3>

<h3>Markdown Preview</h3>

<h3>GBK Encoding Support</h3>

<h3>VAlign</h3>

<p><code>Ctrl + \</code></p>

<h3>PHP Namespace Command</h3>

<h3>Goto Documentation</h3>

<h3>GitGutter</h3>

<h3>Gist</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cURL的一些妙用]]></title>
    <link href="http://devin0910.github.io/blog/2013/07/12/a-brief-introduction-to-curl/"/>
    <updated>2013-07-12T10:26:00+08:00</updated>
    <id>http://devin0910.github.io/blog/2013/07/12/a-brief-introduction-to-curl</id>
    <content type="html"><![CDATA[<h2>关于cURL</h2>

<p>根据<a href="http://zh.wikipedia.org/wiki/CURL">Wiki</a>上的介绍：</p>

<blockquote><p>cURL是一个利用URL语法在命令行下工作的文件传输工具，1997年首次发行。它支持文件上传和下载，所以是综合传输工具，但按传统，习惯称cURL为下载工具。cURL还包含了用于程序开发的libcurl。cURL支援的通讯协定有FTP、FTPS、HTTP、HTTPS、TFTP、SFTP、Gopher、SCP、Telnet、DICT、FILE、LDAP、LDAPS、IMAP、POP3、SMTP和RTSP。</p></blockquote>

<p>在Ubuntu下你可以通过下面这个命令<code>apt-get install curl</code>来安装cURL，如果你使用的是Windows，那么你可以通过安装cygwin或者直接<a href="http://curl.haxx.se/download.html#Win64">点击这儿</a>下载相应的版本。安装成功之后，你可以通过<code>curl --help</code>查看这个命令的相关参数介绍。</p>

<h2>入门篇</h2>

<ol>
<li><p>查看网页源码：</p>

<p> curl <a href="http://www.netscape.com/">http://www.netscape.com/</a></p></li>
</ol>


<p>&mdash;&mdash;&mdash;&mdash;输出内容：</p>

<pre><code>&lt;!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN"&gt;
&lt;html&gt;&lt;head&gt;
&lt;title&gt;301 Moved Permanently&lt;/title&gt;
&lt;/head&gt;&lt;body&gt;
&lt;h1&gt;Moved Permanently&lt;/h1&gt;
&lt;p&gt;The document has moved &lt;a href="http://netscape.aol.com"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;
</code></pre>

<p>你也可以通过</p>

<pre><code>curl ftp://ftp.funet.fi/README
</code></pre>

<p>查看远程ftp服务器上的文件内容。</p>

<ol>
<li><p>保存文件内容：
上面我们讲到了如何查看远程服务器上的内容，那怎么保存在本地呢？
通过<code>curl --help</code>可以看到-o选项可以让实现这个功能：</p>

<p>  -o, &mdash;output FILE   Write output to <file> instead of stdout</p></li>
</ol>


<p>那么，如果要保存远程文件，可以使用下面的命令：<code>curl -o test.html http://www.netscape.com/</code>，这样你就可以在当前命令行的目录下可以看到多出了一个test.html文件（你可以把文件保存成任意名称的，只需修改-o后面的参数即可）。
如果想要保持本地保存的文件名跟远程文件名一致，只需要指定参数<code>-O</code>:</p>

<pre><code>-O, --remote-name   Write output to a file named as the remote file
</code></pre>

<p>比如：<code>curl -O ftp://ftp.funet.fi/README</code>。</p>

<ol>
<li><p>指定用户名、密码：
当使用ftp传输文件需要指定用户名、密码时，我们可以在url中包含它们，eg：<code>curl ftp://name:passwd@machine.domain:port/full/path/to/file</code>也可以使用-u选项：<code>curl -u name:passwd ftp://machine.domain:port/full/path/to/file</code>。</p></li>
<li><p>自动跳转：
第一个示例中，我们可以看到，这个站点已被重定向了，可以使用<code>-L</code>参数：</p>

<p>  -L, &mdash;location      Follow redirects (H)</p></li>
</ol>


<p>那么现在这个命令应该是<code>curl -L http://www.netscape.com/</code></p>

<h2>表单提交</h2>

<p>有时候当你写完后台程序功能，为了测试表单功能是否正确需要模拟测试，你可以简单的通过写html页面模拟一个表单或者通过js的Ajax来模拟一个请求。其实还有个更简便的方法&mdash;使用cURL。</p>

<ol>
<li><p>测试GET方法：
测试GET方法其实很简单，可以直接在url后面跟参数，比如<code>curl "http://localhost/test/index.php?a=a&amp;b=b"</code>
注意：如果不对链接加双引号<code>curl http://localhost/test/index.php?a=a&amp;b=b</code>，则只会取到第一参数，在这个例子中为<code>a=a</code>。在linux下，&amp;会使进程系统后台运行，必须对&amp;进行下转义：
<code>curl http://localhost/test/index.php?a=a\&amp;b=b</code>。</p></li>
<li><p>测试POST方法：
模拟表单提交很简单，只需要在<code>-d</code>参数后跟需要提交的参数键值对，例如：
<code>curl -d "name=test&amp;age=22" http://localhost/test/index.php</code>。需要注意的是所有通过post提交的数据需要进行编码，比如“test 1”编码后为&#8221;test%201&#8221;,可以通过js的<code>encodeURIComponent</code>函数，或者php的<code>urlencode</code>函数等。</p></li>
</ol>


<p><code>-F</code>指令可接受类似于<code>-F "name=contents"</code>的参数。如果你上传的内容是从文件里读取的，使用&lt;@filename>作为内容。当你指定一个文件时，也可以在文件名后跟文件的内容类型<code>";type=&lt;mime type&gt;"</code>,比如：<code>curl -F "coolfiles=@b.png;type=image/png" http://localhost/test/index.php</code>。</p>

<p>cURL默认的HTTP动词是GET，使用-X参数可以支持其他动词，如delete <code>curl -X DELETE http://localhost/test/index.php</code>，结果类似于<code>[REQUEST_METHOD] =&gt; DELETE</code>。</p>

<h3>设置cookie，更改头信息等</h3>

<ol>
<li><p>设置cookie：
<code>curl -b "test=test-cookie" http://localhost/test/index.php</code>
<code>curl --cookie "test=test-cookie" http://localhost/test/index.php</code></p></li>
<li><p>增加头信息：
<code>curl -H "X-you-and-me: yes" http://localhost/test/index.php</code>
<code>curl --header "X-you-and-me: yes" http://localhost/test/index.php</code></p></li>
<li><p>更改User Agent：
User Agent用来表示客户端的设备信息，服务器有时会根据这个字段，针对不同设备，返回不同格式的网页，比如手机版和桌面版。默认使用cURL的情况下，返回的头部信息类似于：<code>[User-Agent] =&gt; curl/7.26.0</code>。我们可以使用下面的命令<code>curl -A 'Mozilla/5.0' http://localhost/test/index.php</code>来更改User Agent。上述输出为：<code>[User-Agent] =&gt; 'Mozilla/5.0'</code>。</p></li>
</ol>


<h2>Conclusion</h2>

<p>就像cURL官网介绍的：</p>

<blockquote><p>curl groks(凭直觉深刻了解；欣赏；神交) URLs</p></blockquote>

<p>cURL可以称得上是网络传输相关的瑞士军刀，你可以在<a href="http://curl.haxx.se/docs/manual.html">cURL官方手册</a>找到更多的高级使用方法。</p>

<p>参考：</p>

<ol>
<li><a href="http://curl.haxx.se/docs/manual.html">cURL官方手册</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2011/09/curl.html">curl网站开发指南</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[介绍SPL-迭代器篇]]></title>
    <link href="http://devin0910.github.io/blog/2013/07/11/introduce-to-spl/"/>
    <updated>2013-07-11T11:49:00+08:00</updated>
    <id>http://devin0910.github.io/blog/2013/07/11/introduce-to-spl</id>
    <content type="html"><![CDATA[<h2>什么SPL</h2>

<p>SPL是Standard PHP Library的简称。在php文档中，关于SPL的介绍是：</p>

<blockquote><p>SPL是用于解决典型问题(standard problems)的一组接口与类的集合。</p></blockquote>

<p>下面这段代码可以查看所有SPL类：</p>

<pre><code>&lt;?php

foreach (spl_classes() as $key =&gt; $value) {
    echo $key . ' -&gt; ' . $value . PHP_EOL;
}  
</code></pre>

<ol>
<li>SPL的迭代器目标是为php提供一些可以实现高效数据访问的接口和类，功能上来说是被设计成遍历集合结构（可以是数组，数据库结果集，xml，目录等等）；</li>
<li>数据结构：双向链表，堆、栈、队列等；</li>
<li>接口：Countable，OuterIterator，RecursiveIterator，SeekableIterator等；</li>
<li>异常：BadFuctionCallException， LogicException， RuntimeException等；</li>
<li>SPL函数：比如用于自动加载的spl_autoload_register, 返回指定对象的hash id：spl_object_hash等；</li>
<li>文件处理：关于某个文件信息的SplFileInfo类，关于某个文件的SplFileObject类等；</li>
<li>各种类及接口：数组对象ArrayObject，可用于实现观察者模式的SplObserver和SplSubject。</li>
</ol>


<p>如果想要了解更多，可以查看<a href="http://www.php.net/manual/en/book.spl.php">SPL</a></p>

<h2>什么是迭代器</h2>

<p>在php文档中的描述是：</p>

<blockquote><p>可在内部迭代自己的外部迭代器或类的接口。</p></blockquote>

<h3>Traversable（遍历）接口</h3>

<p>检测一个类是否可以使用foreach进行遍历的接口。无法被单独实现的基本抽象接口，相反它必须由IteratorAggregate或Iterator接口实现。</p>

<p>Note:
&ndash; 实现此接口的内建类可以使用foreach进行遍历而无需实现IteratorAggregate或Iterator接口。
&ndash; 这是一个无法在PHP脚本中实现的内部引擎接口。IteratorAggregate或Iterator接口可以用来代替它。</p>

<pre><code>Traversable {}  
</code></pre>

<p>这个接口没有任何方法，它的作用仅仅是作为所有可遍历类的基本接口。
比如你想使用foreach遍历某个对象，但你不能确定该对象是否是数组，或者是否已经实现IteratorAggregate、Iterator、Traversable接口，你可以使用下面的代码段来检测：</p>

<pre><code>&lt;?php

if (!is_array($items) &amp;&amp; !$items instanceof Traversable) {
    // Throw exception here
}  
</code></pre>

<h3>Iterator（迭代器）接口</h3>

<p>所有的迭代器都有标准的接口。</p>

<pre><code>&lt;?php

Iterator extends Traversable
{
    abstract public mixed current(void); // 返回当前元素
    abstract public scalar key(void);    // 返回当前元素的键
    abstract public void next(void);     // 向前移动到下一个元素
    abstract public void rewind(void);   // 返回到迭代器的第一个元素
    abstract public boolean valid(void); // 检查当前位置是否有效
}  
</code></pre>

<p>下面是一些PHP提供的一些用于日常任务的迭代器：</p>

<ul>
<li>ArrayIterator

<ul>
<li>RecursiveArrayIterator</li>
</ul>
</li>
<li>EmptyIterator</li>
<li>IteratorIterator

<ul>
<li>AppendIterator</li>
<li>CachingIterator

<ul>
<li>RecursiveCachingIterator</li>
</ul>
</li>
<li>FileIterator

<ul>
<li>CallbackFilterIterator

<ul>
<li>RecursiveCallbackFilterIterator</li>
</ul>
</li>
<li>RecursiveFilterIterator

<ul>
<li>ParentIterator</li>
</ul>
</li>
<li>RegexIterator

<ul>
<li>RecursiveRegexIterator</li>
</ul>
</li>
</ul>
</li>
<li>InfiniteIterator</li>
<li>LimitIterator</li>
<li>NoRewindIterator</li>
</ul>
</li>
<li>MultipleIterator</li>
<li>RecursiveIteratorIterator

<ul>
<li>RecursiveTreeIterator</li>
</ul>
</li>
<li>DirecotyIterator (extends SplFileInfo)

<ul>
<li>FileSystemIterator

<ul>
<li>GlobalIterator</li>
<li>RecursiveDirectoryIterator</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>下面是来自php文档中关于迭代器的一个示例：</p>

<pre><code>&lt;?php

class CustomIterator implements Iterator
{
    private $position = 0;
    private $array = array(
        "firstelement",
        "secondelement",
        "lastelement",
    );  

    public function __construct() {
        $this-&gt;position = 0;
    }

    function rewind() {
        var_dump(__METHOD__);
        $this-&gt;position = 0;
    }

    function current() {
        var_dump(__METHOD__);
        return $this-&gt;array[$this-&gt;position];
    }

    function key() {
        var_dump(__METHOD__);
        return $this-&gt;position;
    }

    function next() {
        var_dump(__METHOD__);
        ++$this-&gt;position;
    }

    function valid() {
        var_dump(__METHOD__);
        return isset($this-&gt;array[$this-&gt;position]);
    }
}

$it = new CustomIterator;
foreach($it as $key =&gt; $value) {
    var_dump($key, $value);
    echo "\n";
}
</code></pre>

<p>以上例子的输出类似于：</p>

<pre><code>string(18) "myIterator::rewind"
string(17) "myIterator::valid"
string(19) "myIterator::current"
string(15) "myIterator::key"
int(0)
string(12) "firstelement"

string(16) "myIterator::next"
string(17) "myIterator::valid"
string(19) "myIterator::current"
string(15) "myIterator::key"
int(1)
string(13) "secondelement"

string(16) "myIterator::next"
string(17) "myIterator::valid"
string(19) "myIterator::current"
string(15) "myIterator::key"
int(2)
string(11) "lastelement"

string(16) "myIterator::next"
string(17) "myIterator::valid"
</code></pre>

<h3>IteratorAggregate（聚合式迭代器）接口</h3>

<p>创建外部迭代器的接口。</p>

<pre><code>&lt;?php

IteratorAggregate extends Traversable 
{
    abstract public Traversable getIterator (void); // 获取一个外部迭代器
}
</code></pre>

<p>下面是来自php文档中关于聚合式迭代器的一个示例：</p>

<pre><code>&lt;?php

class myData implements IteratorAggregate {
    public $property1 = "Public property one";
    public $property2 = "Public property two";
    public $property3 = "Public property three";

    public function __construct() {
        $this-&gt;property4 = "last property";
    }

    public function getIterator() {
        return new ArrayIterator($this);
    }
}

$obj = new myData;

foreach($obj as $key =&gt; $value) {
    var_dump($key, $value);
    echo "\n";
}
</code></pre>

<p>以上例子的输出类似于：</p>

<pre><code>string(9) "property1"
string(19) "Public property one"

string(9) "property2"
string(19) "Public property two"

string(9) "property3"
string(21) "Public property three"

string(9) "property4"
string(13) "last property"
</code></pre>

<h3>在迭代器上使用回调函数</h3>

<p>首先我们来看下面两个例子：<br/>
现在有个数组<code>['dingo', 'wombat', 'wallaby']</code>，想输出每个单词的首字母大写，即<code>['Dingo', 'Wombat', 'Wallaby']</code>，下面是通过<code>array_walk</code>函数来实现的：</p>

<pre><code>&lt;?php

$array = array('dingo', 'wombat', 'wallaby');

array_walk($array, function ($item) {
    echo ucfirst($item) . PHP_EOL;
});
</code></pre>

<p>那从前面的介绍来看，迭代器也具有遍历对象的功能，那怎样来实现类似上面功能呢：PHP中有个函数<code>int iterator_apply(Traversable $iterator, callable $function [, array $args])</code> 为迭代器中每个元素调用一个用户自定义函数，接下来看代码吧：</p>

<pre><code>&lt;?php

$array = array('dingo', 'wombat', 'wallaby');

function addCaps(Iterator $it)
{
    echo ucfirst($it-&gt;current()) . PHP_EOL;
    return true;
}

try {
    $it = new ArrayIterator($array);
    iterator_apply($it, 'addCaps', array($it));
} catch (Exception $e) {
    echo $e-&gt;getMessage();
}  
</code></pre>

<p>在这里需要注意：为了遍历iterator，回调函数addCaps必须返回true，否则，只会输出第一个元素（可以自行测试）</p>

<p>如果需要了解更多关于迭代器方面的资料，可以查看下面引用的第二个链接。</p>

<p>参考：</p>

<ol>
<li><a href="http://www.php.net/manual/en/book.spl.php">PHP官方手册</a></li>
<li><a href="http://www.phpro.org/tutorials/Introduction-to-SPL.html">Introduction to SPL</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[细说PHP中的平行处理]]></title>
    <link href="http://devin0910.github.io/blog/2013/07/10/parallel-processing-in-php/"/>
    <updated>2013-07-10T16:40:00+08:00</updated>
    <id>http://devin0910.github.io/blog/2013/07/10/parallel-processing-in-php</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于数据库设计中的反规范化]]></title>
    <link href="http://devin0910.github.io/blog/2013/07/09/about-database-denormalize/"/>
    <updated>2013-07-09T12:04:00+08:00</updated>
    <id>http://devin0910.github.io/blog/2013/07/09/about-database-denormalize</id>
    <content type="html"><![CDATA[<h2>什么是数据库设计的反规范化</h2>

<p>在关系型数据库中，反规范化是加速读取（数据检索）的方法，在数据库设计时有选择地<strong>在数据结构标准化之后</strong>回加特定的冗余数据示例。反规范化数据库不应该和从未进行过规范化的数据库相混淆。</p>

<h2>VS 规范化数据库设计</h2>

<p>规范化数据库设计在写操作密集型、读比写多的应用中非常好。这是因为以下几个原因：</p>

<p>从某种意义上说，数据库的规范化于反规范化并不相互对立、非此即彼。因为“分解”越深，关系就越多，联接操作就越频繁，最费时间，特别是以查询为主的数据库来说，频繁的联接会影响查询速度。所以，关系有时故意保留成反规范的，或者规范化以后又反规范化了，这样做通常是为了改进性能。</p>

<h2>常用的反规范化设计技术</h2>

<p>在进行反规范化操作事前，要充分考虑数据的存储需求、表的大小、一些特殊的计算（如合计）、数据的物理存储位置等。常用的反规范化技术有一下集中：</p>

<ol>
<li><p>分割表。如果一张表的数据量很到，可以将该表分割成若干个，方法有一下三种：</p></li>
<li><p> 水平分割：根据一列或多列的数据值把数据行放到两个独立表中。水平分割通常在以下情况下使用：</p>

<ol>
<li> 表很大。 分割后降低了查询时读取的数据和索引的页数，同时也降低索引的层数。</li>
<li> 表中的数据本来就有独立性。 例如表中分别记录歌地区的数据或不同时期的数据。</li>
<li> 表中的数据需要存放在多个介质上。 例如毕业学生成绩表和在校学生成绩表。</li>
</ol>


<p>  水平分割会增加应用复杂度，它通常在查询时需要多个表明，查询所用数据需要union操作。在许多个数据库应用中，这种复杂性会超过它带来的有点。</p></li>
<li><p> 垂直分割： 把主码与常用列和不常用列分表放在两个表中。垂直分割可以使数据行变小，减少I/O次数。缺点是需要管理冗余列，查询所有数据需要join操作。</p></li>
<li><p> 混合分割： 在实际一个用中仅进行单一的水平分割或垂直分割是不够的，通常需要使用两种方式的结合。</p></li>
<li><p>合并表。合并表和分割表的操作相反，是将几个较小的表合成一个较大的表。如果用户经常需要访问某些表中的数据，可以将这几个表合并为一个表，避免了访问时的联接操作，提高了效率，但同时也失去了数据之间在概念上的分割，可能会有序大量的空值浪费存储空间。</p></li>
<li>复制表。当不同的用户经常同时读写一个表中的一部分数据时，可以将这些常用数据复制成一个表，即将不同用户的访问分散到了不同的表上，有效减少了竞争，提高了并行处理的能力，改善了性能，但也同时产生了如何保持基本表和复制表之间数据一致的问题。</li>
<li>增加冗余列。当大量的查询或更新都是基于两个表进行时，可以在其中一个表上增加若干冗余列，避免频繁执行表与表之间的联接操作。但需要注意，增加冗余性是以空间换取效率，并且设计冗余列的更新操作必须对两个表同时进行。</li>
<li>增加派生列。派生列是对另一个表中的数据进行计算后产生的。增加派生列可以使统计运算减少联接操作。但增加派生列也是以空间换取效率，并且数据列更新时需要对派生列进行相应的更新。</li>
</ol>


<h2>反规范化设计中数据完整性的维护</h2>

<p>数据库技术中的完整性是指数据的正确性、相容性和一致性，使用反规范技术所带来的最大问题是需要维护数据的完整性。通常采用事务逻辑维护、批处理维护和触发器维护等方法来保证数据的完整性。</p>

<ul>
<li>事务逻辑维护
该方法要求在同一事务中涉及的表同步进行增、删、改操作。由于不同事务可能对应不同的表，在所有相关表中进行相应操作，容易遗漏，因而采用事务逻辑来维护数据库的完整性风险较大。</li>
<li>批处理维护
批处理维护是指对于实时性要求不高的数据库，当冗余列或派生列的修改积累一定时间后，运行一个批处理作业或存储过程对于冗余或派生列进行修改以达到维护数据库完整性的目的。</li>
<li>触发器维护
该方法是维护数据库完整性最强大的工具。通过创建触发器，对数据的任何修改可立即触发对对应列的修改，可使最终用户和程序员不受冗余数据的影响。</li>
</ul>


<h2>Conclusion</h2>

<p>参考：</p>

<ol>
<li><a href="http://www.doc88.com/p-4873964779026.html">关系规范化理论及反规范化设计在数据库中的运用</a></li>
<li><a href="http://www.ovaistariq.net/199/databases-normalization-or-denormalization-which-is-the-better-technique/">Databases: Normalization or Denormalization. Which is the better technique?</a></li>
<li><a href="http://webandphp.com/DataModeling104%3ADenormalization">Data Modeling 104: De-normalization</a></li>
<li><a href="http://database-programmer.blogspot.com/2008/04/denormalization-patterns.html">Denormalization Patterns</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[怎样使用Octopress来写博客]]></title>
    <link href="http://devin0910.github.io/blog/2013/07/05/how-to-use-octopress/"/>
    <updated>2013-07-05T16:17:00+08:00</updated>
    <id>http://devin0910.github.io/blog/2013/07/05/how-to-use-octopress</id>
    <content type="html"><![CDATA[<h3>需要使用的命令：</h3>

<ul>
<li>chcp 65001</li>
<li>rake new_post[&ldquo;Zombie Ninjas Attack: A survivor&rsquo;s retrospective&rdquo;]</li>
<li>rake generate</li>
<li>rake preview</li>
<li>rake deploy</li>
</ul>


<p>安装通过<a href="http://rubyforge.org/frs/download.php/76862/railsinstaller-2.2.1.exe">Railsinstaller</a>（注意：路径不要带空格）。gem uninstall rake删除默认版本，并安装gem install rake -v&#8217;0.9.2.2&#8217;。</p>
]]></content>
  </entry>
  
</feed>
